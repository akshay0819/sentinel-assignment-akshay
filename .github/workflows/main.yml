name: CI/CD for Rapyd Sentinel

on:
  push:
    branches:
      - master

jobs:
  terraform:
    name: Terraform CI Pipeline
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: environments/dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials (via GitHub Secrets)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Install TFLint
        run: |
          curl -sL https://github.com/terraform-linters/tflint/releases/latest/download/tflint_linux_amd64.zip -o tflint.zip
          unzip tflint.zip
          sudo mv tflint /usr/local/bin/
          rm tflint.zip

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Lint
        run: tflint --recursive

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve tfplan

  deploy-k8s:
    name: Deploy Kubernetes Workloads
    runs-on: ubuntu-latest
    needs: terraform

    env:
      REGION: eu-central-1
      BACKEND_CLUSTER: eks-backend
      GATEWAY_CLUSTER: eks-gateway

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Upload K8s Manifests to S3
        run: |
          aws s3 cp k8s/backend/ s3://rapyd-sentinel-tf-state-dev-eu-central-1/k8s/backend/ --recursive
          aws s3 cp k8s/gateway/ s3://rapyd-sentinel-tf-state-dev-eu-central-1/k8s/gateway/ --recursive

      - name: Fetch Backend Cluster Token, CA, and Endpoint
        id: backend
        run: |
          CA=$(aws eks describe-cluster \
            --region $REGION \
            --name $BACKEND_CLUSTER \
            --query "cluster.certificateAuthority.data" \
            --output text)

          ENDPOINT=$(aws eks describe-cluster \
            --region $REGION \
            --name $BACKEND_CLUSTER \
            --query "cluster.endpoint" \
            --output text)

          TOKEN=$(aws eks get-token \
            --region $REGION \
            --cluster-name $BACKEND_CLUSTER \
            --output json | jq -r '.status.token')

          echo "CERT_AUTH_DATA=$CA" >> $GITHUB_ENV
          echo "EKS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
          echo "EKS_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Deploy Backend Manifests via SSM (Dry Run)
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "apply backend manifests" \
            --targets '[{"Key":"tag:Name","Values":["akshay-eks-ssm-bastion-backend"]}]' \
            --parameters '{
              "commands": [
                "mkdir -p /root/.kube",
                "cat <<EOF > /root/.kube/config",
                "apiVersion: v1",
                "kind: Config",
                "clusters:",
                "- name: eks",
                "  cluster:",
                "    server: ${EKS_ENDPOINT}",
                "    certificate-authority-data: ${CERT_AUTH_DATA}",
                "contexts:",
                "- name: eks",
                "  context:",
                "    cluster: eks",
                "    user: eks-user",
                "current-context: eks",
                "users:",
                "- name: eks-user",
                "  user:",
                "    token: ${EKS_TOKEN}",
                "EOF",
                "aws s3 cp s3://rapyd-sentinel-tf-state-dev-eu-central-1/k8s/backend/ /tmp/k8s/backend/ --recursive",
                "kubectl --kubeconfig /root/.kube/config apply -f /tmp/k8s/backend/"
              ]
            }' \
            --region ${{ env.REGION }} \
            --cloud-watch-output-config '{"CloudWatchLogGroupName":"/ssm/eks-backend-deploy","CloudWatchOutputEnabled":true}'

      - name: Setup kubectl for Gateway Cluster
        run: |
          aws eks update-kubeconfig \
            --region $REGION \
            --name $GATEWAY_CLUSTER

      - name: Deploy Gateway K8s Manifests
        run: |
          kubectl apply -f k8s/gateway/
